#! /bin/bash
# +------------------------------------------------------------+
# | MerMouY mermouy[at]gmail[dot]com
# |
# | This program is free software; you can redistribute it and/or
# | modify it under the terms of the GNU General Public License
# | as published by the Free Software Foundation; either version
# | 3 of the License, or (at your option) any later version.
# |
# | This program is distributed in the hope that it will be useful,
# | but WITHOUT ANY WARRANTY; without even the implied warranty
# | of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# | See the GNU General Public License for more details.
# |
# | You should have received a copy of the GNU General Public
# | License along with this program; if not, write to the
# | Free Software Foundation, Inc., 51 Franklin St,
# | Fifth Floor, Boston, MA  02110-1301  USA
# +------------------------------------------------------------+
# Simple gui to sync directories with inosync & yad

## Edit to your needs:
Ino_dir="$HOME/.config/inosync-gui"

##
AppName="inosync-gui"
Author="MerMouY"
Licence="GPL 3"
Version="0.1"
results=$(mktemp --tmpdir inosync-gui.XXXXXXXXXX)

##Better not touch this or you know what u are doing
yadopt='--title=Inosync-gui --image=firefox --always-print-result --center --window-icon=chromium-browser'
ls=`which ls`
echo=`which echo`
yad=`which yad`
inosync="/usr/local/bin/inosync.py"

#Fifo
PIPE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
mkfifo $PIPE
exec 3<> $PIPE

function search_dialog()
{
    for i in `which kdialog zenity Xdialog dialog 2> /dev/null`
    do
        if [ -n $i ]
        then
            DIALOG=$i
            return;
        fi
    done
}

if [ -z "$yad" ]
	then
	search_dialog
	if [ -z $DIALOG ]
		then
    	echo -e "No dialog command found.\nPlease install kdialog, zenity, xdialog or dialog for a better interface."
	else message "The yad dialog is not present.\n$AppName should be soon adapted to $Dalog."
	fi
fi

function message()
{
if [ $# -gt 1 ]
	then
	case "$1" in
		"error")
			$DIALOG $GuiName --text="<span color=\"red\"><b>$2</b></span>"  --image="$AppName\_error" --button=Quit $3
		;;
		"warning")
			$DIALOG $GuiName --text="<b>$2</b>"  --image="$AppName\_warning" --button=Ok $3
		;;
		"*")
		$DIALOG $GuiName --text="<span color=\"green\"><b>$1</b></span>" --image="$AppName\_ok" --button=Ok $3
		;;
	esac
else
	$DIALOG --text="<span color=\"red\"><b>$1</b></span>" --image="$scoreus_error" --button=Quit
fi
}

### Install
# Config directory
function install()
{
if [ -n "ls $Ino_dir" ];then
	mkdir -p $Ino_dir
fi
}

function runsync()
{
if [ "$#" = "0" ]
	then
	message error "Must be arguments to this command"
	exit 1
fi
echo "$@"
exit 0
}
export -f runsync

#Sshc=$(ssh -l $USER -p $Port $Serveur $DDir)
CreateConf() {
Name="$1"
cat > $Ino_dir/.$Name.conf << EOF
wpaths = ["$SRCF"]
#rexcludes = [
#       "/localhost",
# ]
rpaths = ["$SRCF"]
rnodes = [
      "$RNODES",
]
#extra = "--rsh=ssh -a"
#rspeed = 0
#emask = [
#     "IN_CLOSE_WRITE",
#     "IN_CREATE",
#     "IN_DELETE",
#     "IN_MOVED_FROM",
#     "IN_MOVED_TO",
#]
#edelay = 10
#rsync = "/usr/bin/rsync"
Inoptions = "$DAEMON $NORSYNC"
SyncIcon = "$ICON"
SyncDescription = "$DESCRIPTION"
EOF
}

## Choose a conf or create new one
function main_ui()
{
a=0
existing=`ls $Ino_dir/*.conf`
for f in $existing; do
#TODO
let a++
echo $a
echo "true"
	echo `basename "$f" | cut -d "." -f 1`
	echo $(more "$f" | /usr/bin/grep rpaths | cut -d "\"" -f2)
	echo $(more "$f" | grep -i 'SyncDescription =' | cut -d "\"" -f 2)
	echo $(more "$f" | grep -i 'wpaths =' "$f" | cut -d \" -f 2)
	if [ -n "$(more $f | grep -i 'Inoptions =' | grep -i 'daemon')" ];then echo TRUE;else echo FALSE;fi
	if [ -n "$(more $f | grep -i 'Inoptions =' | grep -i 'norsync')" ];then echo TRUE;else echo FALSE;fi
	Iconpath=$(more $f | grep -i 'SyncIcon =' | cut -d "\"" -f 2)
	if [ -z $Iconpath ];then echo "default-icon"
	else echo "$Iconpath"
	fi
done | $yad --list $yadopt --button=Exit:1 --button="New":0 \
--text="<b>Choose a Sync configuration to run, to edit or create a new one:</b>\n			Right Click to add or modify.\n			Double click to run." \
--width=900 --height=500 --print-all --expand-column=0 --search-column=1 --dclick-action='bash -c "EditData %s"'  \
--column="Id" --column="Watched: ":CHK  --column="Name: " --column="Nodes: " --column="Description: " --column="Source Folder: " --column="Daemon mode: ":CHK --column="Simulation mode: ":CHK --column="Icon: ":IMG > temp
}

function CreateNewConf()
{
cat > $Ino_dir/.temp.conf << EOF
wpaths = ["@SRCF"]
#rexcludes = [
#       "/localhost",
# ]
rpaths = ["@SRCF"]
rnodes = [
      "@RNODES",
]
#extra = "--rsh=ssh -a"
#rspeed = 0
#emask = [
#     "IN_CLOSE_WRITE",
#     "IN_CREATE",
#     "IN_DELETE",
#     "IN_MOVED_FROM",
#     "IN_MOVED_TO",
#]
#edelay = 10
#rsync = "/usr/bin/rsync"
Inoptions = "@DAEMON @NORSYNC"
SyncIcon = "@ICON"
SyncDescription = "@DESCRIPTION"
EOF
}
export -f CreateNewConf

function NewData()
{
CreateNewConf
$yad $yadopt --form --text="<b>Edit your Synchronized Folders: </b>" \
--field="Name of this Synchronization: " "MySync" \
--field="Folder to watch and Sync from: ":dir "$HOME" \
--field="Folder(s) to sync to (Nodes): ":mfl 'path/to/dir (All at once)' \
--field="Description you may need: " "Your tiny description" \
--field="An Icon may also help: ":fl /usr/share/icons/gnome/ > $Ino_dir/.tmp

#--field="Advanced options":CHK TRUE

if [ "$?" = "1" ] || [ "$?" = "252" ]; then
	exit 0
else
	eval $(echo `cat $Ino_dir/.tmp` | awk -F'|' '{printf "export  NAME=\"%s\" SRCF=\"%s\" RNODES=\"%s\" DESCRIPTION=\"%s\" ICON=\"%s\"", $1, $2, $3, $4, $5}')>&3
	cat $Ino_dir/.temp.conf  | sed "s|@RNODES|$NODES|" | sed "s|@DESCRIPTION|$DESCRIPTION|" | sed "s|@SRCF|$SRCF|" | sed "s|@ICON|$ICON|" > $Ino_dir/$NAME.conf
fi
}

function EditData()
{
f="$Ino_dir/$1.conf"
if [ -s "$f" ]
	then
	CreateNewConf
#--field="Advanced options":CHK TRUE
	ACT=`echo "true"`
	NAME=`echo $(basename "$f" | cut -d "." -f 1)`
	RPATH=`echo $(more "$f" | /usr/bin/grep rpaths | cut -d "\"" -f2)`
	DESC=`echo $(more "$f" | grep -i 'SyncDescription =' | cut -d "\"" -f 2)`
	WPATH=`echo $(more "$f" | grep -i 'wpaths =' "$f" | cut -d \" -f 2)`
	DAEMON=`if [ -n "$(more $f | grep -i 'Inoptions =' | grep -i 'daemon')" ];then echo TRUE;else echo FALSE;fi`
	NORSYNC=`if [ -n "$(more $f | grep -i 'Inoptions =' | grep -i 'norsync')" ];then echo TRUE;else echo FALSE;fi`
	Iconpath=$(more $f | grep -i 'SyncIcon =' | cut -d "\"" -f 2)
	if [ -z $Iconpath ];then ICONPATH="default-icon"
	else ICONPATH="$Iconpath"
	fi
$yad $yadopt --form --text="<b>Edit your Synchronized Folders: </b>" \
--field="Name of this Synchronization: " "$NAME" \
--field="Folder to watch and Sync from: ":dir "$RPATH" \
--field="Folder(s) to sync to (Nodes): ":dir "$WPATH" \
--field="Description you may need: " "$DESC" \
--field="An Icon may also help: ":fl "$ICONPATH" > $Ino_dir/.tmp

	if [ "$?" = "1" ] || [ "$?" = "252" ]; then
		rm -f $Ino_dir/.tmp && exit 1
	else
		eval $(echo  `cat $Ino_dir/.tmp` | awk -F'|' '{printf "export  NAME=\"%s\" SRCF=\"%s\" RNODES=\"%s\" DESCRIPTION=\"%s\" ICON=\"%s\"", $1, $2, $3, $4, $5}')>&3
		cat $Ino_dir/.temp.conf  | sed "s|@RNODES|$NODES|" | sed "s|@DESCRIPTION|$DESCRIPTION|" | sed "s|@SRCF|$SRCF|" | sed "s|@ICON|$ICON|" > $Ino_dir/$NAME.conf
		rm -f $Ino_dir/.tmp
	fi
else exit 1
fi
}
export -f EditData

# test(){
# case $? in
# 	1) exit 0 ;;
# 	0) ConfigFileCreation=$($yad $yadopt --form --text="Edit your Synchronized Folders: " \
# --field=Nodes:MFLS "My Destination nodes (one by line)" \
# --field=Name "MySync" \
# --field=Description "Your tiny description" \
# --field="Source Folder: ":DIR "$HOME" \
# --field="Choose an Icon: ":fl /usr/share/icons/gnome/ \
# --field="Advanced options":CHK TRUE)
#
# 		if [ "$?" = "1" ] || [ "$?" = "252" ] ;then exit 0;fi
#
# 		Istrue=`echo -e "$ConfigFileCreation" | grep '|TRUE|'`
#
# 		if [ -n "$Istrue" ];then
# 			ConfigFileCreation1=$($yad $yadopt --form --text="Edit your Synchronized Folders Options: " \
# --field="Daemonize (fork to background)":CHK FALSE \
# --field="Do not actually call rsync (simulate)":CHK FALSE \
# --field="Print debugging information":CHK FALSE \
# --button=Cancel:1 --button=Create:0)
# 			echo -e "$ConfigFileCreation$ConfigFileCreation1" | sed 's/|/\n/g' | sed '/^$/d' |  while read line
# 			do
# 				eval $(echo $line | awk -F'|' '{printf "export ACTIVATED=\"%s\" NAME=\"%s\" DESCRIPTION=\"%s\" SRCF=\"%s\" ACT=\"%s\" DAEMON=\"%s\" NORSYNC=\"%s\" ICON=\"%s\"", $2, $1, $3, $4, $5, $6, $7, $8}')
#         	done
# 			CreateConf $NAME || return 1
#         	case $? in
# 				0) $yad $yadopt --text="$Ino_dir/$NAME.conf Created" --buttons=Ok:$0;;
#  				*) rm $Ino_dir/$NAME.conf || message error "PLANTE" && exit 1
# 					message warning "<b>Cancelled by user...</b>" --no-buttons --timeout=1
# 					bash $0 ;;
#
# # 				Fcc=$(echo -e "$ConfigFileCreation$ConfigFileCreation1" | sed -e 's/||/|/g' | sed -e 's/|/\n/g')
# # 					Name=$(echo -e "$Fcc" | sed -n "2p")
# # 					echo `basename "$Fcc" | cut -d "." -f 1`
# # 					echo $(cat "$Fcc" | grep -i 'SyncDescription =' | cut -d "\"" -f 2)
# # 					echo $(cat "$Fcc" | grep -i 'wpaths =' "$f" | cut -d \" -f 2)
# # 					if [ -n "$(ps -auxr | grep \"inosync -c $f\" 2>/dev/null)" ];then echo TRUE;else echo FALSE;fi
# # 					if [ -n "$(cat \"$Fcc\" | grep -i 'Inoptions =' | grep -i 'daemon')" ];then echo TRUE;else echo FALSE;fi
# # 					if [ -n "$(cat \"$Fcc\" | grep -i 'Inoptions =' | grep -i 'norsync')" ];then echo TRUE;else echo 	FALSE;fi
# # 					Iconpath= `cat \"$Fcc\" | grep -i 'SyncIcon =' | cut -d : -f 2`
# # 					if [ -z $Iconpath ];then echo "default-icon";else echo "$iconpath";fi
# 			esac
# 		else
# 			CreateConf `cat $result`
# 			case $? in
# 				0) $yad $yadopt --text="$Ino_dir/$NAME.conf Created" --buttons=Ok:$0;;
# 				*) rm $Ino_dir/$NAME.conf
# 					message error "<b>Cancelled by user...</b>" --no-buttons --timeout=1
# 					bash $0 ;;
# 			esac
# 		fi;;
# 	*) bash $0;;
# esac
#
# unset RNODES NAME DESCRIPTION SRCF ACT DAEMON NORSYNC ICON
# rm -f $results
# }

case "$1" in
	"") main_ui
		rm -f temp
		exit 0;;
	"--edit") EditData $2
		rm -f temp
		exit 0;;
	"*") exit 1;;
esac